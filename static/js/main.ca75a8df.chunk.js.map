{"version":3,"sources":["hooks/useTimer.ts","media/pop.mp3","components/ProgressBar.tsx","components/TimerDisplay.tsx","components/App.tsx","index.tsx"],"names":["formatTimeDiff","diff","format","moment","utc","useTimer","duration","unit","displayFormat","refreshTime","onTimerEnd","timerInterval","useRef","onTimerEndCallback","useState","endTime","add","maxTimeDiff","Math","max","calculateTimteDiff","currentDisplay","isRunning","currentTimeDiff","setState","setIsRunning","state","clearTimerInterval","current","clearInterval","stopTimer","startTimer","callback","setInterval","setTimerEndCallback","ProgressBar","percentage","className","style","width","min","TimerDisplay","ticks","name","onClick","App","lookAwayTimer","workTimer","useSound","popMP3","play","useEffect","document","title","handleTimerClick","renderWorkTimer","renderLookAwayTimer","isAnyTimerRunning","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ca75a8df.chunk.js","sourcesContent":["import moment, { Moment } from \"moment\";\r\nimport { useRef, useState } from \"react\";\r\n\r\ninterface UseTimerOptions {\r\n  duration: number;\r\n  unit: moment.unitOfTime.DurationConstructor;\r\n  displayFormat: string;\r\n  refreshTime: number;\r\n  onTimerEnd: Callback;\r\n}\r\n\r\ninterface TimerState {\r\n  endTime: Moment;\r\n  currentDisplay: string;\r\n  isRunning: boolean;\r\n  maxTimeDiff: number;\r\n  currentTimeDiff: number;\r\n}\r\n\r\ntype Callback = () => void;\r\n\r\nconst formatTimeDiff = (diff: number, format: string) =>\r\n  moment.utc(diff).format(format);\r\n\r\nconst calculateTimteDiff = (endTime: Moment) =>\r\n  Math.max(endTime.diff(moment()), 0);\r\n\r\nconst useTimer = ({\r\n  duration = 15,\r\n  unit = \"minutes\",\r\n  displayFormat = \"MM:ss\",\r\n  refreshTime = 100,\r\n  onTimerEnd = () => {},\r\n}: Partial<UseTimerOptions>) => {\r\n  const timerInterval = useRef<NodeJS.Timeout>();\r\n\r\n  const onTimerEndCallback = useRef(onTimerEnd);\r\n\r\n  const [\r\n    { isRunning, currentDisplay, maxTimeDiff, currentTimeDiff },\r\n    setState,\r\n  ] = useState<TimerState>(() => {\r\n    const endTime = moment().add(duration, unit);\r\n    const maxTimeDiff = calculateTimteDiff(endTime);\r\n    return {\r\n      maxTimeDiff,\r\n      endTime,\r\n      currentDisplay: formatTimeDiff(endTime.diff(moment()), displayFormat),\r\n      isRunning: false,\r\n      currentTimeDiff: maxTimeDiff,\r\n    };\r\n  });\r\n\r\n  const setEndTime = (endTime: Moment) =>\r\n    setState((state) => ({ ...state, endTime }));\r\n\r\n  const setIsRunning = (isRunning: boolean) =>\r\n    setState((state) => ({ ...state, isRunning }));\r\n\r\n  const setTimerInterval = (callback: Callback) => {\r\n    timerInterval.current = setInterval(callback, refreshTime);\r\n  };\r\n\r\n  const setTimerEndCallback = (callback: Callback) =>\r\n    (onTimerEndCallback.current = callback);\r\n\r\n  const clearTimerInterval = () =>\r\n    timerInterval.current && clearInterval(timerInterval.current);\r\n\r\n  const startTimer = () => {\r\n    if (!isRunning) {\r\n      clearTimerInterval();\r\n      setEndTime(moment().add(duration, unit));\r\n      setIsRunning(true);\r\n      setTimerInterval(() => {\r\n        setState((state) => {\r\n          const diff = Math.max(state.endTime.diff(moment()), 0);\r\n          if (diff <= 0) {\r\n            onTimerEndCallback.current();\r\n            stopTimer();\r\n          }\r\n          const currentDisplay = formatTimeDiff(diff, displayFormat);\r\n          return { ...state, currentDisplay, currentTimeDiff: diff };\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const stopTimer = () => {\r\n    setIsRunning(false);\r\n    clearTimerInterval();\r\n  };\r\n\r\n  return {\r\n    startTimer,\r\n    stopTimer,\r\n    currentDisplay,\r\n    setTimerEndCallback,\r\n    isRunning,\r\n    maxTimeDiff,\r\n    currentTimeDiff,\r\n  };\r\n};\r\n\r\nexport default useTimer;\r\n","export default __webpack_public_path__ + \"static/media/pop.55cf888a.mp3\";","import React from \"react\";\r\n\r\ninterface ProgresBarProps {\r\n  percentage: number;\r\n}\r\n\r\nconst ProgressBar = ({ percentage }: ProgresBarProps) => {\r\n  return (\r\n    <div className=\"progress-bar\">\r\n      <div\r\n        style={{ width: Math.min(Math.max(percentage * 100, 0), 100) + \"%\" }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import moment from \"moment\";\r\nimport React from \"react\";\r\n\r\ninterface TimerDisplayProps {\r\n  ticks: number;\r\n  name: string;\r\n  format: string;\r\n  onClick: () => void;\r\n}\r\n\r\nconst TimerDisplay = ({\r\n  ticks = 0,\r\n  name = \"\",\r\n  format = \"mm:ss\",\r\n  onClick = () => {},\r\n}: Partial<TimerDisplayProps>) => {\r\n  return (\r\n    <>\r\n      <div className=\"timer-display-name\">{name}</div>\r\n      <div className=\"timer-display\" onClick={onClick}>\r\n        {moment.utc(ticks).format(format)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TimerDisplay;\r\n","import React, { useEffect } from \"react\";\nimport useTimer from \"../hooks/useTimer\";\nimport useSound from \"use-sound\";\nimport popMP3 from \"../media/pop.mp3\";\nimport ProgressBar from \"./ProgressBar\";\nimport TimerDisplay from \"./TimerDisplay\";\n\nfunction App() {\n  const lookAwayTimer = useTimer({\n    duration: 15,\n    displayFormat: \"mm:ss\",\n    refreshTime: 33,\n    unit: \"seconds\",\n  });\n\n  const workTimer = useTimer({\n    duration: 15,\n    displayFormat: \"mm:ss\",\n    refreshTime: 33,\n    unit: \"minutes\",\n  });\n\n  const [play] = useSound(popMP3);\n\n  useEffect(() => {\n    lookAwayTimer.setTimerEndCallback(() => {\n      workTimer.startTimer();\n      play();\n    });\n\n    workTimer.setTimerEndCallback(() => {\n      lookAwayTimer.startTimer();\n      play();\n    });\n  }, [lookAwayTimer, workTimer, play]);\n\n  useEffect(() => {\n    document.title = workTimer.currentDisplay;\n  }, [workTimer.currentDisplay, lookAwayTimer.currentDisplay]);\n\n  const handleTimerClick = () => {\n    if (workTimer.isRunning) {\n      workTimer.stopTimer();\n      lookAwayTimer.startTimer();\n    } else if (lookAwayTimer.isRunning) {\n      lookAwayTimer.stopTimer();\n      workTimer.startTimer();\n    } else {\n      workTimer.startTimer();\n    }\n  };\n\n  const renderWorkTimer = (\n    <>\n      <TimerDisplay\n        format=\"mm:ss\"\n        name=\"work\"\n        ticks={workTimer.currentTimeDiff}\n        onClick={handleTimerClick}\n      />\n      <ProgressBar\n        percentage={workTimer.currentTimeDiff / workTimer.maxTimeDiff}\n      />\n    </>\n  );\n\n  const renderLookAwayTimer = (\n    <>\n      <TimerDisplay\n        format=\"mm:ss\"\n        name=\"look away\"\n        ticks={lookAwayTimer.currentTimeDiff}\n        onClick={handleTimerClick}\n      />\n      <ProgressBar\n        percentage={lookAwayTimer.currentTimeDiff / lookAwayTimer.maxTimeDiff}\n      />\n    </>\n  );\n\n  const isAnyTimerRunning = workTimer.isRunning || lookAwayTimer.isRunning;\n\n  return (\n    <div className=\"app\">\n      {!isAnyTimerRunning\n        ? renderWorkTimer\n        : workTimer.isRunning\n        ? renderWorkTimer\n        : renderLookAwayTimer}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}