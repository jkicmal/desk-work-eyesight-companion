{"version":3,"sources":["hooks/useTimer.ts","media/pop.mp3","components/ProgressBar.tsx","components/TimerDisplay.tsx","components/App.tsx","index.tsx"],"names":["calculateTimeDiff","endTime","Math","max","diff","moment","calculateEndTime","duration","unit","add","useTimer","refreshTime","onTimerEnd","timerInterval","useRef","onTimerEndCallback","useState","maxTimeDiff","isRunning","currentTimeDiff","state","setState","setTimerEndCallback","useCallback","callback","current","clearTimerInterval","clearInterval","setTimerInterval","setInterval","startTimer","shouldStop","stopTimer","resetTimer","ProgressBar","percentage","className","style","width","min","TimerDisplay","ticks","name","format","onClick","utc","App","breakMode","setBreakMode","workTimer","lookTimer","useSound","popMP3","playPopSound","startTimers","stopTimers","useEffect","workTime","lookTime","document","title","renderWorkTimer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.45cc0f18.chunk.js","sourcesContent":["import moment, { Moment } from \"moment\";\r\nimport { useCallback, useRef, useState } from \"react\";\r\n\r\ntype TimeUnit = moment.unitOfTime.DurationConstructor;\r\n\r\ninterface UseTimerOptions {\r\n  duration: number;\r\n  unit: TimeUnit;\r\n  refreshTime: number;\r\n  onTimerEnd: Callback;\r\n}\r\n\r\ninterface TimerState {\r\n  endTime: Moment;\r\n  isRunning: boolean;\r\n  maxTimeDiff: number;\r\n  currentTimeDiff: number;\r\n}\r\n\r\ninterface UseTimerReturn {\r\n  currentTimeDiff: number;\r\n  startTimer: Callback;\r\n  stopTimer: Callback;\r\n  setTimerEndCallback: (callback: Callback) => void;\r\n  isRunning: boolean;\r\n  maxTimeDiff: number;\r\n  resetTimer: Callback;\r\n}\r\n\r\ntype Callback = () => void;\r\n\r\nconst calculateTimeDiff = (endTime: Moment) =>\r\n  Math.max(endTime.diff(moment()), 0);\r\n\r\nconst calculateEndTime = (duration: number, unit: TimeUnit) =>\r\n  moment().add(duration, unit).add(10, \"milliseconds\");\r\n\r\nconst useTimer = ({\r\n  duration = 15,\r\n  unit = \"minutes\",\r\n  refreshTime = 33,\r\n  onTimerEnd = () => {},\r\n}: Partial<UseTimerOptions>): UseTimerReturn => {\r\n  const timerInterval = useRef<NodeJS.Timeout>();\r\n\r\n  const onTimerEndCallback = useRef(onTimerEnd);\r\n\r\n  const [state, setState] = useState<TimerState>(() => {\r\n    const endTime = calculateEndTime(duration, unit);\r\n    const maxTimeDiff = calculateTimeDiff(endTime);\r\n    return {\r\n      maxTimeDiff,\r\n      endTime,\r\n      isRunning: false,\r\n      currentTimeDiff: maxTimeDiff,\r\n    };\r\n  });\r\n\r\n  const { isRunning, maxTimeDiff, currentTimeDiff } = state;\r\n\r\n  const setTimerEndCallback = useCallback(\r\n    (callback: Callback) => (onTimerEndCallback.current = callback),\r\n    []\r\n  );\r\n\r\n  const clearTimerInterval = useCallback(\r\n    () => timerInterval.current && clearInterval(timerInterval.current),\r\n    []\r\n  );\r\n\r\n  const setTimerInterval = useCallback(\r\n    (callback: Callback) => {\r\n      clearTimerInterval();\r\n      timerInterval.current = setInterval(callback, refreshTime);\r\n    },\r\n    [refreshTime, clearTimerInterval]\r\n  );\r\n\r\n  const startTimer = useCallback(() => {\r\n    if (!isRunning) {\r\n      setState((state) => ({\r\n        ...state,\r\n        endTime: calculateEndTime(duration, unit),\r\n      }));\r\n      setTimerInterval(() => {\r\n        setState((state) => {\r\n          const diff = calculateTimeDiff(state.endTime);\r\n          const shouldStop = diff <= 0;\r\n          if (shouldStop) {\r\n            clearTimerInterval();\r\n            onTimerEndCallback.current();\r\n          }\r\n          return { ...state, currentTimeDiff: diff, isRunning: !shouldStop };\r\n        });\r\n      });\r\n    }\r\n  }, [isRunning, duration, unit, setTimerInterval, clearTimerInterval]);\r\n\r\n  const stopTimer = useCallback(() => {\r\n    clearTimerInterval();\r\n    setState((state) => {\r\n      const endTime = calculateEndTime(duration, unit);\r\n      return {\r\n        ...state,\r\n        isRunning: false,\r\n        endTime,\r\n        currentTimeDiff: calculateTimeDiff(endTime),\r\n      };\r\n    });\r\n  }, [duration, unit, clearTimerInterval]);\r\n\r\n  const resetTimer = () => {\r\n    setState((state) => {\r\n      const endTime = calculateEndTime(duration, unit);\r\n      return {\r\n        ...state,\r\n        endTime,\r\n        currentTimeDiff: calculateTimeDiff(endTime),\r\n      };\r\n    });\r\n  };\r\n\r\n  return {\r\n    currentTimeDiff,\r\n    startTimer,\r\n    stopTimer,\r\n    setTimerEndCallback,\r\n    isRunning,\r\n    maxTimeDiff,\r\n    resetTimer,\r\n  };\r\n};\r\n\r\nexport default useTimer;\r\n","export default __webpack_public_path__ + \"static/media/pop.55cf888a.mp3\";","import React from \"react\";\r\n\r\ninterface ProgresBarProps {\r\n  percentage: number;\r\n}\r\n\r\nconst ProgressBar = ({ percentage }: ProgresBarProps) => {\r\n  return (\r\n    <div className=\"progress-bar\">\r\n      <div\r\n        style={{ width: Math.min(Math.max(percentage * 100, 0), 100) + \"%\" }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import moment from \"moment\";\r\nimport React from \"react\";\r\n\r\ninterface TimerDisplayProps {\r\n  ticks: number;\r\n  name: string;\r\n  format: string;\r\n  onClick: () => void;\r\n}\r\n\r\nconst TimerDisplay = ({\r\n  ticks = 0,\r\n  name = \"\",\r\n  format = \"mm:ss\",\r\n  onClick = () => {},\r\n}: Partial<TimerDisplayProps>) => {\r\n  return (\r\n    <>\r\n      <div className=\"timer-display-name\">{name}</div>\r\n      <div className=\"timer-display\" onClick={onClick}>\r\n        {moment.utc(ticks).format(format)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TimerDisplay;\r\n","import React, { useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport useTimer from \"../hooks/useTimer\";\nimport useSound from \"use-sound\";\nimport popMP3 from \"../media/pop.mp3\";\nimport ProgressBar from \"./ProgressBar\";\nimport TimerDisplay from \"./TimerDisplay\";\n\nfunction App() {\n  const [breakMode, setBreakMode] = useState(false);\n\n  const workTimer = useTimer({\n    duration: 1.5,\n    unit: \"hours\",\n  });\n\n  const lookTimer = useTimer({\n    duration: 15,\n    unit: \"minutes\",\n  });\n\n  const [playPopSound] = useSound(popMP3);\n\n  const startTimers = () => {\n    workTimer.startTimer();\n    lookTimer.startTimer();\n  };\n\n  const resetTimers = () => {\n    workTimer.resetTimer();\n    lookTimer.resetTimer();\n  };\n\n  const stopTimers = () => {\n    workTimer.stopTimer();\n    lookTimer.stopTimer();\n  };\n\n  useEffect(() => {\n    lookTimer.setTimerEndCallback(() => {\n      playPopSound();\n      lookTimer.startTimer();\n    });\n    workTimer.setTimerEndCallback(() => {\n      playPopSound();\n      stopTimers();\n      setBreakMode(true);\n      // workTimer.startTimer();\n    });\n    // eslint-disable-next-line\n  }, [playPopSound]);\n\n  useEffect(() => {\n    const workTime = moment.utc(workTimer.currentTimeDiff).format(\"HH:mm:ss\");\n    const lookTime = moment.utc(lookTimer.currentTimeDiff).format(\"HH:mm:ss\");\n    document.title = `${workTime} - ${lookTime}`;\n  }, [workTimer.currentTimeDiff, lookTimer.currentTimeDiff]);\n\n  const renderWorkTimer = (\n    <div>\n      {breakMode ? (\n        <div>\n          <button\n            onClick={() => {\n              setBreakMode(false);\n              startTimers();\n            }}\n          >\n            Ready!\n          </button>\n        </div>\n      ) : (\n        <div>\n          <div>\n            <TimerDisplay\n              format=\"HH:mm:ss\"\n              name=\"work\"\n              ticks={workTimer.currentTimeDiff}\n            />\n            <ProgressBar\n              percentage={workTimer.currentTimeDiff / workTimer.maxTimeDiff}\n            />\n          </div>\n          <div className=\"divider\" />\n          <div>\n            <TimerDisplay\n              format=\"mm:ss\"\n              name=\"look\"\n              ticks={lookTimer.currentTimeDiff}\n            />\n            <ProgressBar\n              percentage={lookTimer.currentTimeDiff / lookTimer.maxTimeDiff}\n            />\n          </div>\n          <button onClick={() => startTimers()}>Start Timers</button>\n          <button onClick={() => resetTimers()}>Reset Timers</button>\n          <button onClick={() => stopTimers()}>Stop Timers</button>\n        </div>\n      )}\n    </div>\n  );\n\n  return <div className=\"app\">{renderWorkTimer}</div>;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}