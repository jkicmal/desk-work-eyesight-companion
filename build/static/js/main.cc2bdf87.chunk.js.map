{"version":3,"sources":["hooks/useTimer.ts","media/pop.mp3","components/App.tsx","index.tsx"],"names":["formatTimeDiff","diff","format","moment","utc","useTimer","duration","unit","displayFormat","refreshTime","onTimerEnd","timerInterval","useRef","onTimerEndCallback","useState","endTime","add","currentDisplay","isRunning","setState","setIsRunning","state","clearTimerInterval","current","clearInterval","stopTimer","startTimer","callback","Math","max","setInterval","setTimerEndCallback","App","lookAwayTimer","workTimer","useSound","popMP3","play","useEffect","document","title","isAnyTimerRunning","className","onClick","ReactDOM","render","StrictMode","getElementById"],"mappings":"yPAmBMA,EAAiB,SAACC,EAAcC,GAAf,OACrBC,IAAOC,IAAIH,GAAMC,OAAOA,IAuEXG,EArEE,SAAC,GAMe,IAAD,IAL9BC,gBAK8B,MALnB,GAKmB,MAJ9BC,YAI8B,MAJvB,UAIuB,MAH9BC,qBAG8B,MAHd,QAGc,MAF9BC,mBAE8B,MAFhB,IAEgB,MAD9BC,kBAC8B,MADjB,aACiB,EACxBC,EAAgBC,mBAEhBC,EAAqBD,iBAAOF,GAHJ,EAKoBI,oBAAqB,WACrE,IAAMC,EAAUZ,MAASa,IAAIV,EAAUC,GACvC,MAAO,CACLQ,UACAE,eAAgBjB,EAAee,EAAQd,KAAKE,OAAWK,GACvDU,WAAW,MAVe,0BAKrBA,EALqB,EAKrBA,UAAWD,EALU,EAKVA,eAAkBE,EALR,KAiBxBC,EAAe,SAACF,GAAD,OACnBC,GAAS,SAACE,GAAD,mBAAC,eAAgBA,GAAjB,IAAwBH,kBAS7BI,EAAqB,kBACzBX,EAAcY,SAAWC,cAAcb,EAAcY,UAqBjDE,EAAY,WAChBL,GAAa,GACbE,KAGF,MAAO,CACLI,WAzBiB,WAVM,IAACC,EANNZ,EAiBbG,IACHI,IAlBgBP,EAmBLZ,MAASa,IAAIV,EAAUC,GAlBpCY,GAAS,SAACE,GAAD,mBAAC,eAAgBA,GAAjB,IAAwBN,eAmB/BK,GAAa,GAdSO,EAeL,WACfR,GAAS,SAACE,GACR,IAAMpB,EAAO2B,KAAKC,IAAIR,EAAMN,QAAQd,KAAKE,OAAW,GAChDF,GAAQ,IACVY,EAAmBU,UACnBE,KAEF,IAAMR,EAAiBjB,EAAeC,EAAMO,GAC5C,OAAO,2BAAKa,GAAZ,IAAmBJ,uBAtBzBN,EAAcY,QAAUO,YAAYH,EAAUlB,KAmC9CgB,YACAR,iBACAc,oBAlC0B,SAACJ,GAAD,OACzBd,EAAmBU,QAAUI,GAkC9BT,c,OCvFW,MAA0B,gC,OC0E1Bc,MArEf,WACE,IAAMC,EAAgB5B,EAAS,CAC7BC,SAAU,GACVE,cAAe,QACfC,YAAa,IACbF,KAAM,YAGF2B,EAAY7B,EAAS,CACzBC,SAAU,GACVE,cAAe,QACfC,YAAa,IACbF,KAAM,YAZK,EAeE4B,YAASC,GAAjBC,EAfM,oBAiBbC,qBAAU,WACRL,EAAcF,qBAAoB,WAChCG,EAAUR,aACVW,OAGFH,EAAUH,qBAAoB,WAC5BE,EAAcP,aACdW,SAED,CAACJ,EAAeC,EAAWG,IAE9BC,qBAAU,WACRC,SAASC,MAAQN,EAAUjB,iBAC1B,CAACiB,EAAUjB,eAAgBgB,EAAchB,iBAE5C,IAAMwB,EAAoBP,EAAUhB,WAAae,EAAcf,UAc/D,OACE,qBAAKwB,UAAU,MAAf,SACE,gCACE,qBAAKA,UAAU,qBAAf,SACID,EAEEP,EAAUhB,UACV,OACA,YAHA,SAKN,qBAAKwB,UAAU,gBAAgBC,QAtBZ,WACnBT,EAAUhB,WACZgB,EAAUT,YACVQ,EAAcP,cACLO,EAAcf,WACvBe,EAAcR,YACdS,EAAUR,cAEVQ,EAAUR,cAcR,SACIe,EAEEP,EAAUhB,UACVgB,EAAUjB,eACVgB,EAAchB,eAHdiB,EAAUjB,uBC3DxB2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFP,SAASQ,eAAe,W","file":"static/js/main.cc2bdf87.chunk.js","sourcesContent":["import moment, { Moment } from \"moment\";\r\nimport { useRef, useState } from \"react\";\r\n\r\ninterface UseTimerOptions {\r\n  duration: number;\r\n  unit: moment.unitOfTime.DurationConstructor;\r\n  displayFormat: string;\r\n  refreshTime: number;\r\n  onTimerEnd: Callback;\r\n}\r\n\r\ninterface TimerState {\r\n  endTime: Moment;\r\n  currentDisplay: string;\r\n  isRunning: boolean;\r\n}\r\n\r\ntype Callback = () => void;\r\n\r\nconst formatTimeDiff = (diff: number, format: string) =>\r\n  moment.utc(diff).format(format);\r\n\r\nconst useTimer = ({\r\n  duration = 15,\r\n  unit = \"minutes\",\r\n  displayFormat = \"MM:ss\",\r\n  refreshTime = 100,\r\n  onTimerEnd = () => {},\r\n}: Partial<UseTimerOptions>) => {\r\n  const timerInterval = useRef<NodeJS.Timeout>();\r\n\r\n  const onTimerEndCallback = useRef(onTimerEnd);\r\n\r\n  const [{ isRunning, currentDisplay }, setState] = useState<TimerState>(() => {\r\n    const endTime = moment().add(duration, unit);\r\n    return {\r\n      endTime,\r\n      currentDisplay: formatTimeDiff(endTime.diff(moment()), displayFormat),\r\n      isRunning: false,\r\n    };\r\n  });\r\n\r\n  const setEndTime = (endTime: Moment) =>\r\n    setState((state) => ({ ...state, endTime }));\r\n\r\n  const setIsRunning = (isRunning: boolean) =>\r\n    setState((state) => ({ ...state, isRunning }));\r\n\r\n  const setTimerInterval = (callback: Callback) => {\r\n    timerInterval.current = setInterval(callback, refreshTime);\r\n  };\r\n\r\n  const setTimerEndCallback = (callback: Callback) =>\r\n    (onTimerEndCallback.current = callback);\r\n\r\n  const clearTimerInterval = () =>\r\n    timerInterval.current && clearInterval(timerInterval.current);\r\n\r\n  const startTimer = () => {\r\n    if (!isRunning) {\r\n      clearTimerInterval();\r\n      setEndTime(moment().add(duration, unit));\r\n      setIsRunning(true);\r\n      setTimerInterval(() => {\r\n        setState((state) => {\r\n          const diff = Math.max(state.endTime.diff(moment()), 0);\r\n          if (diff <= 0) {\r\n            onTimerEndCallback.current();\r\n            stopTimer();\r\n          }\r\n          const currentDisplay = formatTimeDiff(diff, displayFormat);\r\n          return { ...state, currentDisplay };\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const stopTimer = () => {\r\n    setIsRunning(false);\r\n    clearTimerInterval();\r\n  };\r\n\r\n  return {\r\n    startTimer,\r\n    stopTimer,\r\n    currentDisplay,\r\n    setTimerEndCallback,\r\n    isRunning,\r\n  };\r\n};\r\n\r\nexport default useTimer;\r\n","export default __webpack_public_path__ + \"static/media/pop.55cf888a.mp3\";","import React, { useEffect } from \"react\";\nimport useTimer from \"../hooks/useTimer\";\nimport useSound from \"use-sound\";\nimport popMP3 from \"../media/pop.mp3\";\n\nfunction App() {\n  const lookAwayTimer = useTimer({\n    duration: 15,\n    displayFormat: \"mm:ss\",\n    refreshTime: 100,\n    unit: \"seconds\",\n  });\n\n  const workTimer = useTimer({\n    duration: 10,\n    displayFormat: \"mm:ss\",\n    refreshTime: 100,\n    unit: \"minutes\",\n  });\n\n  const [play] = useSound(popMP3);\n\n  useEffect(() => {\n    lookAwayTimer.setTimerEndCallback(() => {\n      workTimer.startTimer();\n      play();\n    });\n\n    workTimer.setTimerEndCallback(() => {\n      lookAwayTimer.startTimer();\n      play();\n    });\n  }, [lookAwayTimer, workTimer, play]);\n\n  useEffect(() => {\n    document.title = workTimer.currentDisplay;\n  }, [workTimer.currentDisplay, lookAwayTimer.currentDisplay]);\n\n  const isAnyTimerRunning = workTimer.isRunning || lookAwayTimer.isRunning;\n\n  const handleTimerClick = () => {\n    if (workTimer.isRunning) {\n      workTimer.stopTimer();\n      lookAwayTimer.startTimer();\n    } else if (lookAwayTimer.isRunning) {\n      lookAwayTimer.stopTimer();\n      workTimer.startTimer();\n    } else {\n      workTimer.startTimer();\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <div>\n        <div className=\"timer-display-name\">\n          {!isAnyTimerRunning\n            ? \"work\"\n            : workTimer.isRunning\n            ? \"work\"\n            : \"look away\"}\n        </div>\n        <div className=\"timer-display\" onClick={handleTimerClick}>\n          {!isAnyTimerRunning\n            ? workTimer.currentDisplay\n            : workTimer.isRunning\n            ? workTimer.currentDisplay\n            : lookAwayTimer.currentDisplay}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}